---
layout: post
uri: /posts/104
permalink: /posts/104/index.html
title: 版本控制系统入门 (II). Git
category:
tag:
description: 本文采用 Creative Commons Attribution-ShareAlike 3.0 Unported 授权。
disqus: false
disqus-url: /tech-blog/2011/12/30/scm-2_zh.html
---

h2. 0. 版本控制：从集中式到分布式

与集中式版本控制系统的客户端-服务器（Client/Server, C/S）模式相异，分布式版本控制系统（Distributed Version Control System, DVCS）采取一种端对端（peer-to-peer, P2P）的对等模式。每个节点（peer）的工作拷贝均是一个完全等效的仓储，而非仅有唯一的一个供客户端同步的“中心”仓储。分布式版本控制通过节点之间交换补丁（patch）来实现。这使得它与集中式版本控制系统存在着许多本质上的差别：
* 不存在一份默认的、权威的“标准”代码拷贝；只有相互之间对等的工作拷贝。
* 常规的操作（如提交、查看历史和回滚更改）速度非常之快，因为不需要同存放中心仓储的远程服务器进行通信。仅仅当对其他节点推入（push）或拖出（pull）变更时才需要网络通信。
* 每一份工作拷贝均是一份有效的完整代码库，其功能与原仓储完全等同。它包含变化的全部历史，可以用以恢复任意的历史数据。

分布式版本控制还具备以下若干重要的特征：
* 可以同时存在多个“中心”仓储。
* 来自不同仓储的代码依据信任网络（web of trust）进行合并，一些主要考虑的因素包括：历史贡献和修改代码的质量。
* 允许存在不同的开发模型。例如：开发/发布分支模型或者类似于指挥官/副官的组织结构模型。这在大型的软件项目中可以形成高效的责任机制。
* “副官”是拥有动态决定哪些分支用于合并的特权的项目成员。
* 在大部分操作中，无需网络连接。
* 提交变更或从远程仓储获取变更时，允许单独的一组“同步”操作。
* 因为变更是单独存放在小的数据单元里的，自动地从不同版本中合并变化变得有可能，即使变化已经被添加到了两个或更多的分支当中。
* 典型的分布式版本控制系统基于存储目录树，用以取代过去的独立文件存储。这使得改变文件的名字和位置、移动代码的某一部分到不同的文件中均变得更加容易了。



h2. 1. Git基本操作

h3. 1.1. 用户设置

设置全局用户名与邮箱：
@$ git config --global user.name "Firstname Lastname"@
@$ git config --global user.email your_email@@@youremail.com@

h3. 1.2. 获取一个git库并创建一个补丁

克隆远程git库到本地当前路径下的hello-world目录：
@$ git clone git://github.com/git/hello-world.git hello-world@

@$ cd hello-world@
@$ (edit files)@
向本地git库中添加文件：
@$ git add (files)@

从本地git库中删除文件：
@$ git rm (files)@
@$ git rm -r (directories)@

修改本地git库中文件后，查看所更改的内容：
@$ git diff --cached@

提交更改到本地git库：
@$ git commit -m 'Explain what I changed'@

也可直接添加所有文件，并提交更改到本地git库：
@$ git commit -a -m 'Explain what I changed'@

创建一个补丁（patch）：
@$ git format-patch origin/master@

h3. 1.3. 创建一个本地git库

将一个现有的本地目录初始化为git库：
@$ cd (project-directory)@
@$ git init@

@$ (add some files)@
添加当前目录中所有文件到git库：
@$ git add .@

提交更改到本地git库：
@$ git commit -m 'Initial commit'@

h3. 1.4. 团队协作

获取远程git库的最新版本，且合并到本地（这实际上包含git fetch和git merge）：
@$ git pull@

提交所有更改到远程git库：
@$ git push@

h3. 1.5. 查看日志

查看当前git库状态：
@$ git status@

显示所有提交日志：
@$ git log@

显示所有提交日志，以及每次提交的具体变化：
@$ git log -p@



h2. 2. 项目托管平台的使用（以GitHub为例）

h3. 2.1. GitHub初始设置

检查SSH密钥是否存在，若已存在，则备份旧的密钥并删除：
@$ cd ~/.ssh@
@$ ls@
@config id_rsa id_rsa.pub known_hosts@
@$ mkdir key_backup@
@$ cp id_rsa* key_backup@
@$ rm id_rsa*@

设置自己的密钥短语（passphrase），生成一对新的SSH密钥：
@$ ssh-keygen -t rsa -C "your_email@@@youremail.com"@

添加SSH公钥到GitHub：
在GitHub页面上点击Account Settings > SSH Public Keys > Add another public key，添加id_rsa.pub文件里的所有内容（SSH公钥）。

确认SSH认证：
@$ ssh -T git@@@github.com@
输入yes确认连接，并输入自己的密码短语。显示如下：
@Hi username! You've successfully authenticated, but GitHub does not provide shell access.@
表明已正确认证SSH密钥。

*注意* 如果以后修改了SSH密钥后提示如下错误信息：

bc. Agent admitted failure to sign using the key.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

你需要手动添加自己的SSH密钥：
@$ ssh-add ~/.ssh/id_rsa@

在本地设置自己的全局用户名与邮箱（同前）：
@$ git config --global user.name "Firstname Lastname"@
@$ git config --global user.email your_email@@@youremail.com@

允许单独地为某个git库设置另外的用户名与邮箱：
@$ cd my_other_repo@
@$ git config user.name "Different Name"@
@$ git config user.email your_email@@@youremail.com@

设置令牌（token）：一些工具并非使用SSH连接GitHub。为了使这些工具能够正常工作，需要找到并设置自己的API令牌。
在GitHub页面上点击Account Settings > Account Admin，找到自己的API Token。
设置全局用户名和令牌：
@$ git config --global github.user username@
@$ git config --global github.token 0123456789yourf0123456789token@

*注意* 如果更改了GitHub的账号密码，一个新的令牌将会被生成，需要重新在命令行下设置。

h3. 2.2. 创建一个新的仓储（repository, repo）

在GitHub页面上点击New Repository，创建一个新的仓储。

在本地创建一个git库，并新建一个README文件：
@$ mkdir ~/Hello-World@
@$ cd ~/Hello-World@
@$ git init@
@$ touch README@

添加README文件并提交到本地git库：
@$ git add README@
@$ git commit -m 'first commit'@

添加远程端“origin”，提交所有更改到远程端“origin”的master分支：
@$ git remote add origin git@@@github.com:username/Hello-World.git@
@$ git push -u origin master@

查看远程端信息：
@$ git remote -v@

h3. 2.3. 分叉（fork）一个已有的仓储

在GitHub项目页面上点击"Fork"。

复制远程git库到本地（分叉产生的仓储自动为“origin”远程端）：
@$ git clone git@@@github.com:username/Spoon-Knife.git@

添加远程端“upstream”，用于追踪上游仓储：
@$ cd Spoon-Knife@
@$ git remote add upstream git://github.com/octocat/Spoon-Knife.git@
@$ git fetch upstream@

提交所有更改到远程端“origin”的master分支：
@$ git push origin master@

获取来自上游仓储（远程端“upstream”）的更改：
@$ git fetch upstream@

将上游（远程端“upstream”）的master分支合并到本地：
@$ git merge upstream/master@

也可直接获取来自上游仓储的更改且合并到本地：
@$ git pull upstream@

h3. 2.4. 使用分支（branch）进行工作

创建一个新的分支：
@$ git branch mybranch@

使用分支进行工作：
@$ git checkout mybranch@

也可直接创建一个新的分支并使用其工作：
@$ git checkout -b mybranch@

在不同分支之间切换：
@$ git checkout master@
@$ git checkout mybranch@

h3. 2.5. 三种常见的Git地址

# Git：
#* @git@ @ @github.com:username/Hello-World.git@
# HTTPS（443），用于Git默认端口（9418）受限时：
#* @https://soimort@@@github.com/username/Hello-World.git@
# Git Read-Only，用于没有写权限的远程git库：
#* @git://github.com/username/Hello-World.git@



h2. 3. 其他流行的分布式版本控制系统

h3. 3.1. Mercurial

* "[Wikipedia: Mercurial]":http://en.wikipedia.org/wiki/Mercurial
* "[Mercurial]":http://mercurial.selenic.com/

h3. 3.2. Bazaar

* "[Wikipedia: Bazaar]":http://en.wikipedia.org/wiki/Bazaar_(software)
* "[Bazaar]":http://bazaar.canonical.com/en/

h2. 参考链接

* "[Wikipedia: DVCS]":http://en.wikipedia.org/wiki/Distributed_Version_Control_System

* "[Wikipedia: Git]":http://en.wikipedia.org/wiki/Git_(software)
* "[Git]":http://git-scm.com/
* "Git Community Book (PDF format)":http://book.git-scm.com/book.pdf
* "Git – Fast Version Control System":http://git.or.cz/index.html
* "Git for Designers":http://hoth.entp.com/output/git_for_designers.html
* "Git for Computer Scientists":http://eagain.net/articles/git-for-computer-scientists/
* "Pro Git":http://progit.org/book/
* "Pro Git（简体中文）":http://progit.org/book/zh/
* "Git Magic":http://www-cs-students.stanford.edu/~blynn/gitmagic/
* "Git Magic（简体中文）":http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/
* "Git from the bottom up (PDF format)":http://ftp.newartisans.com/pub/git.from.bottom.up.pdf
* "Git一分钟教程（简体中文）":http://blog.enjoyrails.com/2008/12/31/git%E4%B8%80%E5%88%86%E9%92%9F%E6%95%99%E7%A8%8B/

* "GitHub Help":http://help.github.com/
* "GitHub Help - Set Up Git":http://help.github.com/win-set-up-git/
* "GitHub Help - Create A Repository":http://help.github.com/create-a-repo/
* "GitHub Help - Fork A Repository":http://help.github.com/fork-a-repo/
