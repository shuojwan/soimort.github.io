---
layout: post
uri: /posts/102
permalink: /posts/102/index.html
title: Qt编码风格约定
category:
tag:
description: 本文采用 Creative Commons Attribution-ShareAlike 3.0 Unported 授权。
disqus: false
disqus-url: /tech-blog/2011/12/29/qt-coding-style_zh.html
---

原文地址： "http://wiki.qt-project.org/Coding_Style":http://wiki.qt-project.org/Coding_Style
中文翻译： by "Mort":http://www.soimort.org

这里是对编写Qt代码时编码风格约定的概述。
数据通过对Qt源码库、论坛和邮件列表的发掘，经开发者的协作整理而成。

h2. 缩进（Indentation）

* 每一级缩进使用4个空格。
* 使用空格，而不是制表符tab！

h2. 声明变量（Declaring variables）

* 每个变量应分别在单独的一行声明。
* 尽可能避免使用过短的（如：“a”、“rbarr”、“nughdeget”）变量名。
* 单字符的变量名仅在作为计数器或临时变量、其用途显而易见时方可使用。
* 当需要用到一个变量时，再对它进行声明。

bc. // 错误的
int a, b;
char *c, *d;

bc. // 正确的
int height;
int width;
char *nameOfThis;
char *nameOfThat;

* 变量和函数名称应以小写字母开头。名称中间的每个单词均以大写字母打头。
* 避免使用缩写。

bc. // 错误的
short Cntr;
char ITEM_DELIM = '\t';

bc. // 正确的
short counter;
char itemDelimiter = '\t';

* 类的名称总是以大写字母开头。公用类以‘Q’开头（如：QRgb）。公用函数大部分以‘q’开头（如：qRgb）。

h2. 空格（Whitespace）

* 使用空行在合适的位置区分代码段。
* 仅使用一个空行。
* 在关键词的后面，或花括号的前面，使用一个且仅一个空格。

bc. // 错误的
if(foo){
}

bc. // 正确的
if (foo) {
}

* 对于指针或引用，总是在类型和‘*’或‘&’之间使用单个空格分隔，但在‘*’或‘&’与变量名之间则没有任何空格。

bc. char *x;
const QString &myString;
const char * const y = "hello";

* 在二元运算符的前后使用空格分隔。
* 强制类型转换（cast）后面不加空格。
* 尽可能避免C风格的强制类型转换。

bc. // 错误的
char* blockOfMemory = (char* ) malloc(data.size());

bc. // 正确的
char *blockOfMemory = reinterpret_cast<char *>(malloc(data.size()));

h2. 花括号（Braces）

* 作为一条基本准则，左花括号总是紧接着上一行作为代码段的开始：

bc. // 错误的
if (codec)
{
}

bc. // 正确的
if (codec) {
}

* 特例：函数的实现和类的声明中，左花括号总是从单独的一行开始。

bc. static void foo(int g)
{
    qDebug("foo: %i", g);
}

bc. class Moo
{
};

* 当条件判断的代码段中包含一行以上语句，或只有一行语句但相当复杂时，使用花括号。

bc. // 错误的
if (address.isEmpty()) {
    return false;
}

bc. for (int i = 0; i < 10; ++i) {
    qDebug("%i", i);
}

bc. // 正确的
if (address.isEmpty())
    return false;

bc. for (int i = 0; i < 10; ++i)
    qDebug("%i", i);

* 特例1：当父代码段语句覆盖多行或存在卷起（wrap）时，应当使用花括号。

bc. // 正确的
if (address.isEmpty() || !isValid()
    || !codec) {
    return false;
}

* 特例2：当if-then-else中的if语句块或else语句块覆盖多行时，也应当使用花括号。

bc. // 错误的
if (address.isEmpty())
    return false;
else {
    qDebug("%s", qPrintable(address));
    ++it;
}

bc. // 正确的
if (address.isEmpty()) {
    return false;
} else {
    qDebug("%s", qPrintable(address));
    ++it;
}

bc. // 错误的
if (a)
    if (b)
        ...
    else
        ...

bc. // 正确的
if (a) {
    if (b)
        ...
    else
        ...
}

* 当一个条件判断代码段的内容为空时，应当加上花括号。

bc. // 错误的
while (a);

bc. // 正确的
while (a) {}

h2. 圆括号（Parentheses）

* 使用圆括号对表达式进行分组：

bc. // 错误的
if (a && b || c)

bc. // 正确的
if ((a && b) || c)

bc. // 错误的
a + b & c

bc. // 正确的
(a + b) & c

h2. Switch语句（Switch statements）

* case关键词和switch出现在同一列（没有缩进）。
* 除非下一个case紧接其后立即出现，否则每一个case的结束必须有一个break（或return）语句，或者明确说明这里不应break的一个注释。

bc. switch (myEnum) {
case Value1:
    doSomething();
    break;
case Value2:
case Value3:
    doSomethingElse();
    // fall through
default:
    defaultHandling();
    break;
}

h2. 分行（Line breaks）

* 保持行的长度小于100个字符；在必要的时候应当进行分行。
* 分行后的逗号应当出现在上一行的结尾；运算符应当出现在下一行的开头。在行末出现的运算符很容易因为编辑器显示范围有限而被忽视。

bc. // 正确的
if (longExpression
    + otherLongExpression
    + otherOtherLongExpression) {
}

bc. // 错误的
if (longExpression +
    otherLongExpression +
    otherOtherLongExpression) {
}

h2. 继承和‘virtual’关键词（Inheritance and the `virtual` keyword）

* 当重实现一个虚方法时，不要把‘virtual’关键词放在头文件当中。

h2. 一般适用的特例（General exception）

* 如果某条规则使你的代码看上去很差劲，尽管去破坏它！
